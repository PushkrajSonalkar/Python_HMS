# Hospital Management System

# Import

from sys import exit
from os import system, name, path, mkdir
from datetime import date

import random
import string


class Hospital(object):
    # Initial Function
    def __init__(self, user_name, password):
        self.user_name = user_name
        self.password = password

    # Login Function
    def login(self):
        # This is the login function of system.
        def clear():
            # for Windows clear screen. 'nt' is used bye OS (import) for Windows OS.
            if name == 'nt':
                _ = system('cls')

        if self.user_name == 'ADMIN' and self.password == 'admin123':            # Checking login
            # Successful
            self.reception()
        else:
            # Failed
            print "provide valid user name and password"
            clear()

    # Receptionist Function
    def reception(self):
        """This Function is used for by the Receptionist to handle all the things
        also it contains the main menu"""

        reception_choice = 0
        while reception_choice != 4:
            # The Main Menu Enter Choice List
            reception_choice = int(raw_input("\nMain Menu Enter Choice\n"
                                             "1.Take Appointment of OPD 2.Take OT Registration "
                                             "3.Emergency Case 4.Exit\n"))
            if reception_choice == 1:
                self.take_appointment()
            elif reception_choice == 2:
                self.take_ot_registration()
            elif reception_choice == 3:
                self.emergency_case()
            elif reception_choice == 4:
                break
            else:
                print "Please provide valid choice"
        exit(1)

    def take_appointment(self):
        # This is a Static Function is used for Take Appointment for OPD

        patient_details = {}

        def get_all_patient():
            print patient_details
        # dump = self.file_backup(patient_details)
        take_appointment_choice = 0
        while take_appointment_choice != 4:
            # The Appointment Menu Enter Choice List
            take_appointment_choice = int(
                raw_input("\nAppointment Menu Enter Choice\n1.New Appointment 2.Advanced Booking of Appointment "
                          "3. Get all Patient 4. Go back to Main menu\n"))
            # Checking which choice is made upon that function will called further
            if take_appointment_choice == 1:
                self.new_appointment(patient_details)
            elif take_appointment_choice == 2:
                self.advanced_booking()
            elif take_appointment_choice == 3:
                get_all_patient()
            elif take_appointment_choice == 4:
                break
            else:
                print "Please provide valid choice"

    def file_backup(self, patient_details):
        data = ''
        file_path = "patient_details\\" + str(date.today()) + ".txt"
        file_pointer = open(file_path, 'r')
        data = file_pointer.read()
        patient_backup = eval(data)
        x = len(patient_backup)
        patient_details.update(patient_backup)
        return x

    def new_appointment(self, patient_details):
        # This Function is used for Take New Appointment for OPD (UNDER take_appointment FUNCTION)

        def generate_id():
            dir_name = "patient_details\\" + str(date.today()) + ".txt"
            if path.exists(dir_name):
                temp_id = self.file_backup(patient_details)
            else:
                temp_id = 0

            # print "temp_id :", temp_id
            if temp_id < 0:
                temp_id = 0

            patient_temp_id = int(temp_id) + 1
            return patient_temp_id

        patient_id = generate_id()  # function call for random patient id

        details = {
            # 'name': 'name', 'treatment': 'sac', 'age': '22', 'last_visited_date': 'date',
            # 'doctor_name': 'name'
        }
        temp_patient_details = {}
        patient_name = 'name'
        patient_treatment = 'treatment'
        patient_age = 'age'
        doctor_allocated = 'allocated_doctor'
        patient_id_last_visit_date = 'last_visit_date'
        details[patient_name] = raw_input("Enter Patient Name\n")
        details[patient_treatment] = raw_input("Enter Treatment of Patient\n")
        details[patient_age] = float(raw_input("Enter Age\n"))
        details[patient_id_last_visit_date] = str(date.today())  # date.today() for current date
        details[doctor_allocated] = raw_input("Enter doctor allocated to patient\n")
        temp_patient_details[patient_id] = details
        patient_details.update(temp_patient_details)
        print "%s is get new appointment" % patient_id
        self.back_up_data(patient_details)
        return patient_details

    def back_up_data(self, patient_details):
        # Used for back up the data
        dir_name = "patient_details"

        def check_directory(directory_name):
            # Create target Directory if don't exist
            if not path.exists(directory_name):
                mkdir(directory_name)
                print("Directory ", directory_name, " Created ")
                return directory_name
            else:
                print("Directory ", directory_name, " already exists")

        check_directory(dir_name)
        file_path = dir_name + "\\" + str(date.today()) + ".txt"

        print file_path
        if path.isfile(file_path):
            file_pointer = open(file_path, 'w')
        else:
            file_pointer = open(file_path, 'w')

        patient_data = str(patient_details)
        file_pointer.write(patient_data)
        print "Back up is taken up in file " + str(date.today())

    def advanced_booking(self):
        """This Function is used for Advanced Booking of Appointment
         for OPD (UNDER take_appointment FUNCTION)"""
        advanced_booking = {}

        def generate_id():
            dir_name = "advanced_booking\\" + str(date.today()) + ".txt"
            if path.exists(dir_name):
                file_path = "advanced_booking\\" + str(date.today()) + ".txt"
                file_pointer = open(file_path, 'r')
                patient_backup = eval(file_pointer.read())
                print patient_backup
                temp_id = patient_backup.keys()[-1]
            else:
                temp_id = 0

            print "temp_id :", temp_id
            if temp_id < 0:
                temp_id = 0
            patient_temp_id = temp_id + 1
            return patient_temp_id

        advance_booking_id = generate_id()  # function call for random patient id


# Main i.e. DRIVER CODE
login_choice = 1
while login_choice == 1:
    login = " Login Here "
    text_login_center = login.center(50, '-')
    print text_login_center
    user = raw_input("Enter User Name:\n")
    psw = raw_input("Enter password:\n")
    a = Hospital(user, psw)
    a.login()
    login_choice = int(raw_input("\n0. You want to exit...? 1. Continue...!\n"))

